From 7d9a7ffff60a698340e504af277479575e4d8bfd Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Fri, 16 May 2025 16:01:33 +0100
Subject: [PATCH 01/12] util/set: finish removing set::mem_ctx

378c6f2246d66254ce0f88cac6daf25b1c012a41 didn't remove it from the struct.

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
Reviewed-by: Faith Ekstrand <faith.ekstrand@collabora.com>
---
 src/util/set.h | 1 -
 1 file changed, 1 deletion(-)

diff --git a/src/util/set.h b/src/util/set.h
index 4af5c0d99fc90..402eea6be5afb 100644
--- a/src/util/set.h
+++ b/src/util/set.h
@@ -41,7 +41,6 @@ struct set_entry {
 };
 
 struct set {
-   void *mem_ctx;
    struct set_entry *table;
    uint32_t (*key_hash_function)(const void *key);
    bool (*key_equals_function)(const void *a, const void *b);
-- 
GitLab


From e4fdc4d26eeb6769b96f7fe16e1ba5ef3be3b5c2 Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Fri, 16 May 2025 16:44:06 +0100
Subject: [PATCH 02/12] ac/nir: fix progress reporting in ac_nir_lower_tex

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
Reviewed-by: Faith Ekstrand <faith.ekstrand@collabora.com>
---
 src/amd/common/nir/ac_nir_lower_tex.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/amd/common/nir/ac_nir_lower_tex.c b/src/amd/common/nir/ac_nir_lower_tex.c
index 935710086f067..7938555d5c718 100644
--- a/src/amd/common/nir/ac_nir_lower_tex.c
+++ b/src/amd/common/nir/ac_nir_lower_tex.c
@@ -499,7 +499,7 @@ ac_nir_lower_tex(nir_shader *nir, const ac_nir_lower_tex_options *options)
                                                          &impl->body,
                                                          &divergent_discard,
                                                          false);
-      nir_progress(impl_progress, impl, nir_metadata_control_flow);
+      progress |= nir_progress(impl_progress, impl, nir_metadata_control_flow);
    }
 
    progress |= nir_shader_instructions_pass(
-- 
GitLab


From ddc4c35878f371414045f382031b0d639d4aa5c1 Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Fri, 16 May 2025 16:46:48 +0100
Subject: [PATCH 03/12] nir: fix progress reporting in
 nir_io_add_const_offset_to_base

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
---
 src/compiler/nir/nir_lower_io.c | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/src/compiler/nir/nir_lower_io.c b/src/compiler/nir/nir_lower_io.c
index c6e4335e76ef9..43b08bfb0bcbb 100644
--- a/src/compiler/nir/nir_lower_io.c
+++ b/src/compiler/nir/nir_lower_io.c
@@ -3200,10 +3200,12 @@ add_const_offset_to_base_block(nir_block *block, nir_builder *b,
                sem.location += off;
                b->cursor = nir_before_instr(&intrin->instr);
                nir_src_rewrite(offset, nir_imm_int(b, 0));
-               progress = true;
             }
             /* non-indirect indexing should reduce num_slots */
             sem.num_slots = is_dual_slot(intrin) ? 2 : 1;
+
+            nir_io_semantics original = nir_intrinsic_io_semantics(intrin);
+            progress |= memcmp(&original, &sem, sizeof(sem));
             nir_intrinsic_set_io_semantics(intrin, sem);
          }
       }
-- 
GitLab


From 82c1892ea6d388dc542f0067c9ef686fdcb24daa Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Fri, 16 May 2025 16:54:27 +0100
Subject: [PATCH 04/12] nir/opt_offsets: report progress if NUW is set

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
Reviewed-by: Faith Ekstrand <faith.ekstrand@collabora.com>
---
 src/compiler/nir/nir_opt_offsets.c | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/src/compiler/nir/nir_opt_offsets.c b/src/compiler/nir/nir_opt_offsets.c
index b64c609564d3d..3928b44bd0dfc 100644
--- a/src/compiler/nir/nir_opt_offsets.c
+++ b/src/compiler/nir/nir_opt_offsets.c
@@ -32,6 +32,7 @@ typedef struct
 {
    struct hash_table *range_ht;
    const nir_opt_offsets_options *options;
+   bool progress;
 } opt_offsets_state;
 
 static nir_scalar
@@ -73,6 +74,7 @@ try_extract_const_addition(nir_builder *b, nir_scalar val, opt_offsets_state *st
 
       /* We proved that unsigned wrap won't be possible, so we can set the flag too. */
       alu->no_unsigned_wrap = true;
+      state->progress = true;
    }
 
    for (unsigned i = 0; i < 2; ++i) {
@@ -240,6 +242,7 @@ nir_opt_offsets(nir_shader *shader, const nir_opt_offsets_options *options)
    opt_offsets_state state;
    state.range_ht = NULL;
    state.options = options;
+   state.progress = false;
 
    bool p = nir_shader_instructions_pass(shader, process_instr,
                                          nir_metadata_control_flow,
@@ -248,5 +251,5 @@ nir_opt_offsets(nir_shader *shader, const nir_opt_offsets_options *options)
    if (state.range_ht)
       _mesa_hash_table_destroy(state.range_ht, NULL);
 
-   return p;
+   return p || state.progress;
 }
-- 
GitLab


From 426a1f3507ddd7d717caf1e9e51d1783fe06b0d8 Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Fri, 16 May 2025 16:57:44 +0100
Subject: [PATCH 05/12] nir/opt_offsets: fix progress determination with
 offsets that add to zero

If the offset is iadd(iadd(iadd(a, 1), b), -1), try_extract_const_addition
will create a dead iadd(a, b) and claim that it didn't modify the shader.

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
---
 src/compiler/nir/nir_opt_offsets.c | 31 +++++++++++++++---------------
 1 file changed, 16 insertions(+), 15 deletions(-)

diff --git a/src/compiler/nir/nir_opt_offsets.c b/src/compiler/nir/nir_opt_offsets.c
index 3928b44bd0dfc..354e17c35718a 100644
--- a/src/compiler/nir/nir_opt_offsets.c
+++ b/src/compiler/nir/nir_opt_offsets.c
@@ -35,18 +35,18 @@ typedef struct
    bool progress;
 } opt_offsets_state;
 
-static nir_scalar
-try_extract_const_addition(nir_builder *b, nir_scalar val, opt_offsets_state *state, unsigned *out_const,
+static bool
+try_extract_const_addition(nir_builder *b, opt_offsets_state *state, nir_scalar *out_val, unsigned *out_const,
                            uint32_t max, bool need_nuw)
 {
-   val = nir_scalar_chase_movs(val);
+   nir_scalar val = nir_scalar_chase_movs(*out_val);
 
    if (!nir_scalar_is_alu(val))
-      return val;
+      return false;
 
    nir_alu_instr *alu = nir_instr_as_alu(val.def->parent_instr);
    if (alu->op != nir_op_iadd)
-      return val;
+      return false;
 
    nir_scalar src[2] = {
       { alu->src[0].src.ssa, alu->src[0].swizzle[val.comp] },
@@ -70,7 +70,7 @@ try_extract_const_addition(nir_builder *b, nir_scalar val, opt_offsets_state *st
       uint32_t ub1 = nir_unsigned_upper_bound(b->shader, state->range_ht, src[1], NULL);
 
       if ((UINT32_MAX - ub0) < ub1)
-         return val;
+         return false;
 
       /* We proved that unsigned wrap won't be possible, so we can set the flag too. */
       alu->no_unsigned_wrap = true;
@@ -83,22 +83,24 @@ try_extract_const_addition(nir_builder *b, nir_scalar val, opt_offsets_state *st
          uint32_t offset = nir_scalar_as_uint(src[i]);
          if (offset + *out_const <= max) {
             *out_const += offset;
-            return try_extract_const_addition(b, src[1 - i], state, out_const, max, need_nuw);
+            try_extract_const_addition(b, state, &src[1 - i], out_const, max, need_nuw);
+            *out_val = src[1 - i];
+            return true;
          }
       }
    }
 
-   uint32_t orig_offset = *out_const;
-   src[0] = try_extract_const_addition(b, src[0], state, out_const, max, need_nuw);
-   src[1] = try_extract_const_addition(b, src[1], state, out_const, max, need_nuw);
-   if (*out_const == orig_offset)
-      return val;
+   bool changed_src0 = try_extract_const_addition(b, state, &src[0], out_const, max, need_nuw);
+   bool changed_src1 = try_extract_const_addition(b, state, &src[1], out_const, max, need_nuw);
+   if (!changed_src0 && !changed_src1)
+      return false;
 
    b->cursor = nir_before_instr(&alu->instr);
    nir_def *r =
       nir_iadd(b, nir_channel(b, src[0].def, src[0].comp),
                nir_channel(b, src[1].def, src[1].comp));
-   return nir_get_scalar(r, 0);
+   *out_val = nir_get_scalar(r, 0);
+   return true;
 }
 
 static bool
@@ -127,8 +129,7 @@ try_fold_load_store(nir_builder *b,
    if (!nir_src_is_const(*off_src)) {
       uint32_t add_offset = 0;
       nir_scalar val = { .def = off_src->ssa, .comp = 0 };
-      val = try_extract_const_addition(b, val, state, &add_offset, max - off_const, need_nuw);
-      if (add_offset == 0)
+      if (!try_extract_const_addition(b, state, &val, &add_offset, max - off_const, need_nuw))
          return false;
       off_const += add_offset;
       b->cursor = nir_before_instr(&intrin->instr);
-- 
GitLab


From 09bb3ae29f512275494581a4776189e39994f1db Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Fri, 16 May 2025 17:04:14 +0100
Subject: [PATCH 06/12] radv: fix progress reporting in lower_rt_derefs

Only create nir_load_rt_arg_scratch_offset_amd if needed.

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
Reviewed-by: Faith Ekstrand <faith.ekstrand@collabora.com>
---
 src/amd/vulkan/nir/radv_nir_rt_shader.c | 10 +++++++---
 1 file changed, 7 insertions(+), 3 deletions(-)

diff --git a/src/amd/vulkan/nir/radv_nir_rt_shader.c b/src/amd/vulkan/nir/radv_nir_rt_shader.c
index 086726052ecc2..99d16e04c30a2 100644
--- a/src/amd/vulkan/nir/radv_nir_rt_shader.c
+++ b/src/amd/vulkan/nir/radv_nir_rt_shader.c
@@ -132,9 +132,8 @@ lower_rt_derefs(nir_shader *shader)
 
    bool progress = false;
 
-   nir_builder b = nir_builder_at(nir_before_impl(impl));
-
-   nir_def *arg_offset = nir_load_rt_arg_scratch_offset_amd(&b);
+   nir_builder b;
+   nir_def *arg_offset = NULL;
 
    nir_foreach_block (block, impl) {
       nir_foreach_instr_safe (instr, block) {
@@ -149,6 +148,11 @@ lower_rt_derefs(nir_shader *shader)
          progress = true;
 
          if (deref->deref_type == nir_deref_type_var) {
+            if (!arg_offset) {
+               b = nir_builder_at(nir_before_impl(impl));
+               arg_offset = nir_load_rt_arg_scratch_offset_amd(&b);
+            }
+
             b.cursor = nir_before_instr(&deref->instr);
             nir_deref_instr *replacement =
                nir_build_deref_cast(&b, arg_offset, nir_var_function_temp, deref->var->type, 0);
-- 
GitLab


From 9907aebecf601a94c2196eee6c89de59ed7424e0 Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Mon, 19 May 2025 17:42:33 +0100
Subject: [PATCH 07/12] nir/opt_if: fix progress reporting with multiple
 function impls

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
---
 src/compiler/nir/nir_opt_if.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/compiler/nir/nir_opt_if.c b/src/compiler/nir/nir_opt_if.c
index aeed27bc999cc..7121a5d6db664 100644
--- a/src/compiler/nir/nir_opt_if.c
+++ b/src/compiler/nir/nir_opt_if.c
@@ -1443,7 +1443,7 @@ nir_opt_if(nir_shader *shader, nir_opt_if_options options)
       nir_builder b = nir_builder_create(impl);
 
       nir_metadata_require(impl, nir_metadata_control_flow);
-      progress = opt_if_safe_cf_list(&b, &impl->body, options);
+      progress |= opt_if_safe_cf_list(&b, &impl->body, options);
       nir_progress(true, impl, nir_metadata_control_flow);
 
       bool preserve = true;
-- 
GitLab


From 37d0b9106dcf230e7c497e86d28b043d5f3145e4 Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Thu, 22 May 2025 11:23:45 +0100
Subject: [PATCH 08/12] nir/opt_if: rewrite progress reporting and metadata
 invalidation

This would unconditionally invalid all metadata except
nir_metadata_control_flow and then invalidate that if opt_if_safe_cf_list
and opt_if_regs_cf_list made no progress.

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
---
 src/compiler/nir/nir_opt_if.c | 49 +++++++++++++++++------------------
 1 file changed, 24 insertions(+), 25 deletions(-)

diff --git a/src/compiler/nir/nir_opt_if.c b/src/compiler/nir/nir_opt_if.c
index 7121a5d6db664..6a617cbf2697b 100644
--- a/src/compiler/nir/nir_opt_if.c
+++ b/src/compiler/nir/nir_opt_if.c
@@ -1434,38 +1434,37 @@ opt_if_safe_cf_list(nir_builder *b, struct exec_list *cf_list, nir_opt_if_option
    return progress;
 }
 
-bool
-nir_opt_if(nir_shader *shader, nir_opt_if_options options)
+static bool
+nir_opt_if_impl(nir_function_impl *impl, nir_opt_if_options options)
 {
-   bool progress = false;
-
-   nir_foreach_function_impl(impl, shader) {
-      nir_builder b = nir_builder_create(impl);
+   nir_builder b = nir_builder_create(impl);
+   nir_metadata_require(impl, nir_metadata_control_flow);
 
-      nir_metadata_require(impl, nir_metadata_control_flow);
-      progress |= opt_if_safe_cf_list(&b, &impl->body, options);
-      nir_progress(true, impl, nir_metadata_control_flow);
+   bool progress_safe = opt_if_safe_cf_list(&b, &impl->body, options);
+   nir_progress(progress_safe, impl, nir_metadata_control_flow);
 
-      bool preserve = true;
+   bool progress = opt_if_cf_list(&b, &impl->body, options);
+   bool progress_regs = opt_if_regs_cf_list(&impl->body);
+   nir_progress(progress || progress_regs, impl, nir_metadata_none);
 
-      if (opt_if_cf_list(&b, &impl->body, options)) {
-         preserve = false;
-         progress = true;
-      }
+   if (progress_regs) {
+      /* If that made progress, we're no longer really in SSA form.  We
+       * need to convert registers back into SSA defs and clean up SSA defs
+       * that don't dominate their uses.
+       */
+      nir_lower_reg_intrinsics_to_ssa_impl(impl);
+   }
 
-      if (opt_if_regs_cf_list(&impl->body)) {
-         preserve = false;
-         progress = true;
+   return progress_safe || progress || progress_regs;
+}
 
-         /* If that made progress, we're no longer really in SSA form.  We
-          * need to convert registers back into SSA defs and clean up SSA defs
-          * that don't dominate their uses.
-          */
-         nir_lower_reg_intrinsics_to_ssa_impl(impl);
-      }
+bool
+nir_opt_if(nir_shader *shader, nir_opt_if_options options)
+{
+   bool progress = false;
 
-      nir_progress(preserve, impl, nir_metadata_none);
-   }
+   nir_foreach_function_impl(impl, shader)
+      progress |= nir_opt_if_impl(impl, options);
 
    return progress;
 }
-- 
GitLab


From 2896f8d85a177ed5c3b9459a6438d2f224c22853 Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Fri, 16 May 2025 16:07:05 +0100
Subject: [PATCH 09/12] nir: fix NIR_DEBUG=extended_validation

This broke after divergence became metadata because the divergence
analysis pass does not support all instructions.

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
---
 src/compiler/nir/nir.c          |  2 +-
 src/compiler/nir/nir.h          |  6 +++---
 src/compiler/nir/nir_metadata.c | 16 ++++++++++++++--
 3 files changed, 18 insertions(+), 6 deletions(-)

diff --git a/src/compiler/nir/nir.c b/src/compiler/nir/nir.c
index f3a32256a636d..8a46da064a8f8 100644
--- a/src/compiler/nir/nir.c
+++ b/src/compiler/nir/nir.c
@@ -49,7 +49,7 @@ static const struct debug_named_value nir_debug_control[] = {
    { "novalidate", NIR_DEBUG_NOVALIDATE,
      "Disable shader validation at each successful lowering/optimization call" },
    { "extended_validation", NIR_DEBUG_EXTENDED_VALIDATION,
-     "Validate even if a pass does not make progress and test that it properly preserves all types of metadata. This can be very slow" },
+     "Validate even if a pass does not make progress and test that it properly preserves most types of metadata. This can be very slow" },
    { "invalidate_metadata", NIR_DEBUG_INVALIDATE_METADATA,
      "Invalidate metadata before passes to try to find passes which don't require metadata that they use. This overrides NIR_DEBUG=extended_validation somewhat" },
    { "tgsi", NIR_DEBUG_TGSI,
diff --git a/src/compiler/nir/nir.h b/src/compiler/nir/nir.h
index 35e6517604fc9..b889ec5f1fd5e 100644
--- a/src/compiler/nir/nir.h
+++ b/src/compiler/nir/nir.h
@@ -4556,7 +4556,7 @@ void nir_validate_shader(nir_shader *shader, const char *when);
 void nir_validate_ssa_dominance(nir_shader *shader, const char *when);
 void nir_metadata_set_validation_flag(nir_shader *shader);
 void nir_metadata_check_validation_flag(nir_shader *shader);
-void nir_metadata_require_all(nir_shader *shader);
+void nir_metadata_require_most(nir_shader *shader);
 
 static inline bool
 should_skip_nir(const char *name)
@@ -4609,7 +4609,7 @@ nir_metadata_check_validation_flag(nir_shader *shader)
    (void)shader;
 }
 static inline void
-nir_metadata_require_all(nir_shader *shader)
+nir_metadata_require_most(nir_shader *shader)
 {
    (void)shader;
 }
@@ -4634,7 +4634,7 @@ should_print_nir(UNUSED nir_shader *shader)
       if (NIR_DEBUG(INVALIDATE_METADATA))                               \
          nir_metadata_invalidate(nir);                                  \
       else if (NIR_DEBUG(EXTENDED_VALIDATION))                          \
-         nir_metadata_require_all(nir);                                 \
+         nir_metadata_require_most(nir);                                \
       do_pass if (NIR_DEBUG(CLONE))                                     \
       {                                                                 \
          nir_shader *_clone = nir_shader_clone(ralloc_parent(nir), nir);\
diff --git a/src/compiler/nir/nir_metadata.c b/src/compiler/nir/nir_metadata.c
index 3cd16a725816b..417b30adc099b 100644
--- a/src/compiler/nir/nir_metadata.c
+++ b/src/compiler/nir/nir_metadata.c
@@ -174,12 +174,24 @@ nir_metadata_check_validation_flag(nir_shader *shader)
 }
 
 void
-nir_metadata_require_all(nir_shader *shader)
+nir_metadata_require_most(nir_shader *shader)
 {
    bool force_unroll_sampler_indirect = shader->options->force_indirect_unrolling_sampler;
    nir_variable_mode indirect_mask = shader->options->force_indirect_unrolling;
    nir_foreach_function_impl(impl, shader) {
-      nir_metadata_require(impl, nir_metadata_all, indirect_mask,
+      nir_metadata md = nir_metadata_all;
+
+      /* We don't know if divergence analysis supports this shader. */
+      md &= ~nir_metadata_divergence;
+
+      if (!impl->structured) {
+         /* These don't support unstructured control flow. */
+         md &= ~nir_metadata_instr_index;
+         md &= ~nir_metadata_loop_analysis;
+         md &= ~nir_metadata_live_defs;
+      }
+
+      nir_metadata_require(impl, md, indirect_mask,
                            (int)force_unroll_sampler_indirect);
    }
 }
-- 
GitLab


From 6d80b8fed6ef77d60aee3ce4c8459a48a2064f9e Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Fri, 16 May 2025 16:23:41 +0100
Subject: [PATCH 10/12] nir: add NIR_DEBUG=progress_validation

Fails if a shader was changed but the pass didn't report progress.

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
---
 src/compiler/nir/nir.c           |  2 ++
 src/compiler/nir/nir.h           | 49 ++++++++++++++++++--------
 src/compiler/nir/nir_serialize.c | 60 +++++++++++++++++++++++++++-----
 3 files changed, 88 insertions(+), 23 deletions(-)

diff --git a/src/compiler/nir/nir.c b/src/compiler/nir/nir.c
index 8a46da064a8f8..82a75636b5312 100644
--- a/src/compiler/nir/nir.c
+++ b/src/compiler/nir/nir.c
@@ -50,6 +50,8 @@ static const struct debug_named_value nir_debug_control[] = {
      "Disable shader validation at each successful lowering/optimization call" },
    { "extended_validation", NIR_DEBUG_EXTENDED_VALIDATION,
      "Validate even if a pass does not make progress and test that it properly preserves most types of metadata. This can be very slow" },
+   { "progress_validation", NIR_DEBUG_PROGRESS_VALIDATION,
+     "Validate that a shader is unmodified if a pass does not report progress" },
    { "invalidate_metadata", NIR_DEBUG_INVALIDATE_METADATA,
      "Invalidate metadata before passes to try to find passes which don't require metadata that they use. This overrides NIR_DEBUG=extended_validation somewhat" },
    { "tgsi", NIR_DEBUG_TGSI,
diff --git a/src/compiler/nir/nir.h b/src/compiler/nir/nir.h
index b889ec5f1fd5e..0c91bbab121e0 100644
--- a/src/compiler/nir/nir.h
+++ b/src/compiler/nir/nir.h
@@ -92,6 +92,7 @@ extern bool nir_debug_print_shader[MESA_SHADER_KERNEL + 1];
 #define NIR_DEBUG_PRINT_PASS_FLAGS       (1u << 22)
 #define NIR_DEBUG_INVALIDATE_METADATA    (1u << 23)
 #define NIR_DEBUG_PRINT_STRUCT_DECLS     (1u << 24)
+#define NIR_DEBUG_PROGRESS_VALIDATION    (1u << 25)
 
 #define NIR_DEBUG_PRINT (NIR_DEBUG_PRINT_VS |  \
                          NIR_DEBUG_PRINT_TCS | \
@@ -4557,6 +4558,8 @@ void nir_validate_ssa_dominance(nir_shader *shader, const char *when);
 void nir_metadata_set_validation_flag(nir_shader *shader);
 void nir_metadata_check_validation_flag(nir_shader *shader);
 void nir_metadata_require_most(nir_shader *shader);
+struct blob nir_validate_progress_setup(nir_shader *shader);
+void nir_validate_progress_finish(nir_shader *shader, struct blob *setup_blob, bool progress, const char *when);
 
 static inline bool
 should_skip_nir(const char *name)
@@ -4613,6 +4616,19 @@ nir_metadata_require_most(nir_shader *shader)
 {
    (void)shader;
 }
+static inline struct blob
+nir_validate_progress_setup(nir_shader *shader)
+{
+   return (struct blob){};
+}
+static inline void
+nir_validate_progress_finish(nir_shader *shader, struct blob *setup_blob, bool progress, const char *when)
+{
+   (void)shader;
+   (void)setup_blob;
+   (void)progress;
+   (void)when;
+}
 static inline bool
 should_skip_nir(UNUSED const char *pass_name)
 {
@@ -4648,20 +4664,25 @@ should_print_nir(UNUSED nir_shader *shader)
 #define NIR_STRINGIZE_INNER(x) #x
 #define NIR_STRINGIZE(x)       NIR_STRINGIZE_INNER(x)
 
-#define NIR_PASS(progress, nir, pass, ...) _PASS(pass, nir, {                               \
-   nir_metadata_set_validation_flag(nir);                                                   \
-   if (should_print_nir(nir))                                                               \
-      printf("%s\n", #pass);                                                                \
-   if (pass(nir, ##__VA_ARGS__)) {                                                          \
-      nir_validate_shader(nir, "after " #pass " in " __FILE__ ":" NIR_STRINGIZE(__LINE__)); \
-      UNUSED bool _;                                                                        \
-      progress = true;                                                                      \
-      if (should_print_nir(nir))                                                            \
-         nir_print_shader(nir, stdout);                                                     \
-      nir_metadata_check_validation_flag(nir);                                              \
-   } else if (NIR_DEBUG(EXTENDED_VALIDATION)) {                                             \
-      nir_validate_shader(nir, "after " #pass " in " __FILE__ ":" NIR_STRINGIZE(__LINE__)); \
-   }                                                                                        \
+#define NIR_PASS(progress, nir, pass, ...) _PASS(pass, nir, {                            \
+   nir_metadata_set_validation_flag(nir);                                                \
+   if (should_print_nir(nir))                                                            \
+      printf("%s\n", #pass);                                                             \
+   static const char *when = "after " #pass " in " __FILE__ ":" NIR_STRINGIZE(__LINE__); \
+   struct blob blob_before = nir_validate_progress_setup(nir);                           \
+   if (pass(nir, ##__VA_ARGS__)) {                                                       \
+      nir_validate_shader(nir, when);                                                    \
+      UNUSED bool _;                                                                     \
+      progress = true;                                                                   \
+      if (should_print_nir(nir))                                                         \
+         nir_print_shader(nir, stdout);                                                  \
+      nir_metadata_check_validation_flag(nir);                                           \
+      nir_validate_progress_finish(nir, &blob_before, true, when);                       \
+   } else {                                                                              \
+      if (NIR_DEBUG(EXTENDED_VALIDATION))                                                \
+         nir_validate_shader(nir, when);                                                 \
+      nir_validate_progress_finish(nir, &blob_before, false, when);                      \
+   }                                                                                     \
 })
 
 /**
diff --git a/src/compiler/nir/nir_serialize.c b/src/compiler/nir/nir_serialize.c
index 49a07f4f0efd1..b69645582d0e6 100644
--- a/src/compiler/nir/nir_serialize.c
+++ b/src/compiler/nir/nir_serialize.c
@@ -2136,15 +2136,8 @@ nir_serialize_function(struct blob *blob, const nir_function *fxn)
    util_dynarray_fini(&ctx.phi_fixups);
 }
 
-/**
- * Serialize NIR into a binary blob.
- *
- * \param strip  Don't serialize information only useful for debugging,
- *               such as variable names, making cache hits from similar
- *               shaders more likely.
- */
-void
-nir_serialize(struct blob *blob, const nir_shader *nir, bool strip)
+static void
+serialize_internal(struct blob *blob, const nir_shader *nir, bool strip, bool serialize_info)
 {
    write_ctx ctx = { 0 };
    ctx.remap_table = _mesa_pointer_hash_table_create(NULL);
@@ -2157,6 +2150,8 @@ nir_serialize(struct blob *blob, const nir_shader *nir, bool strip)
    size_t idx_size_offset = blob_reserve_uint32(blob);
 
    struct shader_info info = nir->info;
+   if (!serialize_info)
+      memset(&info, 0, sizeof(info));
 
    enum nir_serialize_shader_flags flags = 0;
    if (!strip && info.name)
@@ -2205,6 +2200,19 @@ nir_serialize(struct blob *blob, const nir_shader *nir, bool strip)
    util_dynarray_fini(&ctx.phi_fixups);
 }
 
+/**
+ * Serialize NIR into a binary blob.
+ *
+ * \param strip  Don't serialize information only useful for debugging,
+ *               such as variable names, making cache hits from similar
+ *               shaders more likely.
+ */
+void
+nir_serialize(struct blob *blob, const nir_shader *nir, bool strip)
+{
+   serialize_internal(blob, nir, strip, true);
+}
+
 nir_shader *
 nir_deserialize(void *mem_ctx,
                 const struct nir_shader_compiler_options *options,
@@ -2320,3 +2328,37 @@ nir_shader_serialize_deserialize(nir_shader *shader)
    nir_shader_replace(shader, copy);
    ralloc_free(dead_ctx);
 }
+
+#ifndef NDEBUG
+struct blob
+nir_validate_progress_setup(nir_shader *shader)
+{
+   if (!NIR_DEBUG(PROGRESS_VALIDATION))
+      return (struct blob){};
+
+   struct blob blob_before;
+   blob_init(&blob_before);
+   serialize_internal(&blob_before, shader, false, false);
+   return blob_before;
+}
+
+void
+nir_validate_progress_finish(nir_shader *shader, struct blob *setup_blob, bool progress, const char *when)
+{
+   if (!NIR_DEBUG(PROGRESS_VALIDATION))
+      return;
+
+   if (!progress) {
+      struct blob blob_after;
+      blob_init(&blob_after);
+      serialize_internal(&blob_after, shader, false, false);
+      if (setup_blob->size != blob_after.size ||
+          memcmp(setup_blob->data, blob_after.data, setup_blob->size)) {
+         fprintf(stderr, "NIR changed but no progress reported %s\n", when);
+         abort();
+      }
+      blob_finish(&blob_after);
+   }
+   blob_finish(setup_blob);
+}
+#endif
-- 
GitLab


From 5baf78653c88dd21d25710e5c331a7fd0fbd49f1 Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Fri, 16 May 2025 17:25:34 +0100
Subject: [PATCH 11/12] rusticl: support
 NIR_DEBUG=invalidate_metadata/extended_validation

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
---
 .../frontends/rusticl/mesa/compiler/nir.rs    | 23 +++++++++++++++++--
 1 file changed, 21 insertions(+), 2 deletions(-)

diff --git a/src/gallium/frontends/rusticl/mesa/compiler/nir.rs b/src/gallium/frontends/rusticl/mesa/compiler/nir.rs
index 1ed8517d7fee1..105961eb8f236 100644
--- a/src/gallium/frontends/rusticl/mesa/compiler/nir.rs
+++ b/src/gallium/frontends/rusticl/mesa/compiler/nir.rs
@@ -45,12 +45,20 @@ impl<'a, T: 'a> Iterator for ExecListIter<'a, T> {
 macro_rules! nir_pass_impl {
     ($nir:ident, $pass:ident, $func:ident $(,$arg:expr)* $(,)?) => {
         {
+            // SAFETY: mutable static can't be read safely, but this value isn't going to change
+            let ndebug = unsafe { nir_debug };
+
             let func_str = ::std::stringify!($func);
             let func_cstr = ::std::ffi::CString::new(func_str).unwrap();
             let res = if unsafe { should_skip_nir(func_cstr.as_ptr()) } {
                 println!("skipping {}", func_str);
                 false
             } else {
+                if ndebug & NIR_DEBUG_INVALIDATE_METADATA != 0 {
+                    $nir.metadata_invalidate();
+                } else if ndebug & NIR_DEBUG_EXTENDED_VALIDATION != 0 {
+                    $nir.metadata_require_most();
+                }
                 $nir.metadata_set_validation_flag();
                 if $nir.should_print() {
                     println!("{}", func_str);
@@ -63,12 +71,13 @@ macro_rules! nir_pass_impl {
                     $nir.metadata_check_validation_flag();
                     true
                 } else {
+                    if ndebug & NIR_DEBUG_EXTENDED_VALIDATION != 0 {
+                        $nir.validate(&format!("after {} in {}:{}", func_str, file!(), line!()));
+                    }
                     false
                 }
             };
 
-            // SAFETY: mutable static can't be read safely, but this value isn't going to change
-            let ndebug = unsafe { nir_debug };
             if ndebug & NIR_DEBUG_CLONE != 0 {
                 $nir.validate_clone();
             }
@@ -227,6 +236,16 @@ impl NirShader {
         unsafe { nir_metadata_set_validation_flag(self.nir.as_ptr()) }
     }
 
+    #[cfg(debug_assertions)]
+    pub fn metadata_invalidate(&self) {
+        unsafe { nir_metadata_invalidate(self.nir.as_ptr()) }
+    }
+
+    #[cfg(debug_assertions)]
+    pub fn metadata_require_most(&self) {
+        unsafe { nir_metadata_require_most(self.nir.as_ptr()) }
+    }
+
     #[cfg(debug_assertions)]
     pub fn validate(&self, when: &str) {
         let cstr = std::ffi::CString::new(when).unwrap();
-- 
GitLab


From cec161808915e5f6638f0aea775bd70485cf47a1 Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Fri, 16 May 2025 17:45:41 +0100
Subject: [PATCH 12/12] rusticl: support NIR_DEBUG=progress_validation

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
---
 .../frontends/rusticl/mesa/compiler/nir.rs    | 29 +++++++++++++++----
 1 file changed, 24 insertions(+), 5 deletions(-)

diff --git a/src/gallium/frontends/rusticl/mesa/compiler/nir.rs b/src/gallium/frontends/rusticl/mesa/compiler/nir.rs
index 105961eb8f236..4ba184ddbb93d 100644
--- a/src/gallium/frontends/rusticl/mesa/compiler/nir.rs
+++ b/src/gallium/frontends/rusticl/mesa/compiler/nir.rs
@@ -63,19 +63,22 @@ macro_rules! nir_pass_impl {
                 if $nir.should_print() {
                     println!("{}", func_str);
                 }
-                if $nir.$pass($func $(,$arg)*) {
-                    $nir.validate(&format!("after {} in {}:{}", func_str, file!(), line!()));
+                let when = format!("after {} in {}:{}", func_str, file!(), line!());
+                let blob_before = $nir.validate_progress_setup();
+                let progress = $nir.$pass($func $(,$arg)*);
+                if progress {
+                    $nir.validate(&when);
                     if $nir.should_print() {
                         $nir.print();
                     }
                     $nir.metadata_check_validation_flag();
-                    true
                 } else {
                     if ndebug & NIR_DEBUG_EXTENDED_VALIDATION != 0 {
-                        $nir.validate(&format!("after {} in {}:{}", func_str, file!(), line!()));
+                        $nir.validate(&when);
                     }
-                    false
                 }
+                $nir.validate_progress_finish(blob_before, progress, &when);
+                progress
             };
 
             if ndebug & NIR_DEBUG_CLONE != 0 {
@@ -179,6 +182,22 @@ impl NirShader {
         }
     }
 
+    pub fn validate_progress_setup(&self) -> blob {
+        unsafe { nir_validate_progress_setup(self.nir.as_ptr()) }
+    }
+
+    pub fn validate_progress_finish(&self, mut setup_blob: blob, progress: bool, when: &str) {
+        let cstr = std::ffi::CString::new(when).unwrap();
+        unsafe {
+            nir_validate_progress_finish(
+                self.nir.as_ptr(),
+                &mut setup_blob,
+                progress,
+                cstr.as_ptr(),
+            )
+        };
+    }
+
     pub fn print(&self) {
         unsafe { nir_print_shader(self.nir.as_ptr(), stderr_ptr()) };
     }
-- 
GitLab

