From 22d7dd69b2bf8f8c0a2d8779f05fd4770de4ea88 Mon Sep 17 00:00:00 2001
From: Georg Lehmann <dadschoorse@gmail.com>
Date: Tue, 24 Jun 2025 11:06:57 +0200
Subject: [PATCH 1/3] nir/shrink_vectors: shrink larger vectors too
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Reviewed-by: Daniel Schürmann <daniel@schuermann.dev>
Part-of: <https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/35676>
---
 src/compiler/nir/nir_opt_shrink_vectors.c | 17 +++++++----------
 1 file changed, 7 insertions(+), 10 deletions(-)

diff --git a/src/compiler/nir/nir_opt_shrink_vectors.c b/src/compiler/nir/nir_opt_shrink_vectors.c
index f420fa6285c60..71101892c9c0b 100644
--- a/src/compiler/nir/nir_opt_shrink_vectors.c
+++ b/src/compiler/nir/nir_opt_shrink_vectors.c
@@ -219,6 +219,10 @@ opt_shrink_vector(nir_builder *b, nir_alu_instr *instr)
       }
    }
 
+   /* Don't create unsupported vector sizes. */
+   if (!nir_num_components_valid(num_components))
+      return false;
+
    /* return if no component was removed */
    if (num_components == def->num_components)
       return false;
@@ -240,17 +244,10 @@ opt_shrink_vectors_alu(nir_builder *b, nir_alu_instr *instr)
    if (def->num_components == 1)
       return false;
 
-   switch (instr->op) {
-   /* don't use nir_op_is_vec() as not all vector sizes are supported. */
-   case nir_op_vec4:
-   case nir_op_vec3:
-   case nir_op_vec2:
+   if (nir_op_is_vec(instr->op))
       return opt_shrink_vector(b, instr);
-   default:
-      if (nir_op_infos[instr->op].output_size != 0)
-         return false;
-      break;
-   }
+   if (nir_op_infos[instr->op].output_size != 0)
+      return false;
 
    /* don't remove any channels if used by non-ALU */
    if (!is_only_used_by_alu(def))
-- 
GitLab


From e6d208b1f9dd39726abb09df9742ea7d2ef26bd5 Mon Sep 17 00:00:00 2001
From: Georg Lehmann <dadschoorse@gmail.com>
Date: Tue, 24 Jun 2025 11:26:06 +0200
Subject: [PATCH 2/3] nir/opt_shrink_vectors: also split vecs into distinct
 smaller vecs if possible
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Foz-DB Navi48:
Totals from 17 (0.02% of 80265) affected shaders:
Instrs: 75085 -> 74912 (-0.23%); split: -0.23%, +0.00%
CodeSize: 428968 -> 427028 (-0.45%); split: -0.45%, +0.00%
Latency: 1306841 -> 1306080 (-0.06%); split: -0.06%, +0.00%
InvThroughput: 598998 -> 598719 (-0.05%)
Copies: 15733 -> 15561 (-1.09%)
Branches: 2435 -> 2422 (-0.53%)
PreVGPRs: 1723 -> 1721 (-0.12%)
VALU: 43019 -> 42847 (-0.40%)

Reviewed-by: Daniel Schürmann <daniel@schuermann.dev>
Part-of: <https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/35676>
---
 src/compiler/nir/nir_opt_shrink_vectors.c | 69 ++++++++++++++++++-----
 1 file changed, 56 insertions(+), 13 deletions(-)

diff --git a/src/compiler/nir/nir_opt_shrink_vectors.c b/src/compiler/nir/nir_opt_shrink_vectors.c
index 71101892c9c0b..6fb92600dd71a 100644
--- a/src/compiler/nir/nir_opt_shrink_vectors.c
+++ b/src/compiler/nir/nir_opt_shrink_vectors.c
@@ -181,19 +181,13 @@ shrink_intrinsic_to_non_sparse(nir_intrinsic_instr *instr)
 }
 
 static bool
-opt_shrink_vector(nir_builder *b, nir_alu_instr *instr)
+create_smaller_vec(nir_builder *b, nir_alu_instr *vec, nir_component_mask_t mask)
 {
-   nir_def *def = &instr->def;
-   unsigned mask = nir_def_components_read(def);
-
-   /* If nothing was read, leave it up to DCE. */
-   if (mask == 0)
-      return false;
-
-   /* don't remove any channels if used by non-ALU */
-   if (!is_only_used_by_alu(def))
+   /* Leave these for copy propagation. */
+   if (util_is_power_of_two_or_zero(mask))
       return false;
 
+   nir_def *def = &vec->def;
    uint8_t reswizzle[NIR_MAX_VEC_COMPONENTS] = { 0 };
    nir_scalar srcs[NIR_MAX_VEC_COMPONENTS] = { 0 };
    unsigned num_components = 0;
@@ -201,7 +195,7 @@ opt_shrink_vector(nir_builder *b, nir_alu_instr *instr)
       if (!((mask >> i) & 0x1))
          continue;
 
-      nir_scalar scalar = nir_get_scalar(instr->src[i].src.ssa, instr->src[i].swizzle[0]);
+      nir_scalar scalar = nir_scalar_resolved(def, i);
 
       /* Try reuse a component with the same value */
       unsigned j;
@@ -229,12 +223,61 @@ opt_shrink_vector(nir_builder *b, nir_alu_instr *instr)
 
    /* create new vecN and replace uses */
    nir_def *new_vec = nir_vec_scalars(b, srcs, num_components);
-   nir_def_rewrite_uses(def, new_vec);
+
+   nir_foreach_use_safe(src, def) {
+      if (nir_src_components_read(src) & mask)
+         nir_src_rewrite(src, new_vec);
+   }
    reswizzle_alu_uses(new_vec, reswizzle);
 
    return true;
 }
 
+static bool
+opt_shrink_or_split_vector(nir_builder *b, nir_alu_instr *vec)
+{
+   /* Try to split vec into multiple distinct smaller vecs. */
+   nir_component_mask_t use_masks[NIR_MAX_VEC_COMPONENTS] = { 0 };
+   unsigned use_mask_count = 0;
+
+   nir_foreach_use_including_if(src, &vec->def) {
+      /* don't remove any channels if used by non-ALU */
+      if (nir_src_is_if(src) || nir_src_parent_instr(src)->type != nir_instr_type_alu)
+         return false;
+
+      nir_component_mask_t read = nir_src_components_read(src);
+      bool mask_found = false;
+      for (unsigned i = 0; i < use_mask_count; i++) {
+         if (!(use_masks[i] & read))
+            continue;
+
+         use_masks[i] |= read;
+
+         /* Merge overlapping use_masks. */
+         unsigned k = i + 1;
+         for (unsigned j = i + 1; j < use_mask_count; j++) {
+            if (use_masks[i] & use_masks[j])
+               use_masks[i] |= use_masks[j];
+            else
+               use_masks[k++] = use_masks[j];
+         }
+         use_mask_count = k;
+
+         mask_found = true;
+         break;
+      }
+
+      if (!mask_found)
+         use_masks[use_mask_count++] = read;
+   }
+
+   bool progress = false;
+   for (unsigned i = 0; i < use_mask_count; i++)
+      progress |= create_smaller_vec(b, vec, use_masks[i]);
+
+   return progress;
+}
+
 static bool
 opt_shrink_vectors_alu(nir_builder *b, nir_alu_instr *instr)
 {
@@ -245,7 +288,7 @@ opt_shrink_vectors_alu(nir_builder *b, nir_alu_instr *instr)
       return false;
 
    if (nir_op_is_vec(instr->op))
-      return opt_shrink_vector(b, instr);
+      return opt_shrink_or_split_vector(b, instr);
    if (nir_op_infos[instr->op].output_size != 0)
       return false;
 
-- 
GitLab


From 1819e1caef37d21f95b992065ca271894f9e58bd Mon Sep 17 00:00:00 2001
From: Georg Lehmann <dadschoorse@gmail.com>
Date: Sun, 22 Jun 2025 17:32:24 +0200
Subject: [PATCH 3/3] radv: keep fp8 conversions vectorized
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Totals from 11 (0.01% of 80265) affected shaders:
MaxWaves: 102 -> 104 (+1.96%)
Instrs: 24105 -> 21027 (-12.77%)
CodeSize: 190744 -> 167480 (-12.20%)
VGPRs: 1968 -> 1920 (-2.44%)
Latency: 91890 -> 90302 (-1.73%); split: -2.86%, +1.13%
InvThroughput: 100616 -> 98496 (-2.11%); split: -2.24%, +0.13%
VClause: 802 -> 759 (-5.36%); split: -6.48%, +1.12%
Copies: 3131 -> 3329 (+6.32%); split: -0.48%, +6.80%
PreVGPRs: 1816 -> 1802 (-0.77%)
VALU: 12543 -> 11399 (-9.12%)
SALU: 4635 -> 2859 (-38.32%)
VOPD: 1133 -> 1195 (+5.47%); split: +7.33%, -1.85%

Reviewed-by: Daniel Schürmann <daniel@schuermann.dev>
Part-of: <https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/35676>
---
 src/amd/vulkan/radv_shader.c | 13 +++++++++++++
 1 file changed, 13 insertions(+)

diff --git a/src/amd/vulkan/radv_shader.c b/src/amd/vulkan/radv_shader.c
index 9872ee39e6c28..d107c6a8147ad 100644
--- a/src/amd/vulkan/radv_shader.c
+++ b/src/amd/vulkan/radv_shader.c
@@ -82,6 +82,19 @@ vectorize_vec2_16bit(const nir_instr *instr, const void *_)
       return 0;
 
    const nir_alu_instr *alu = nir_instr_as_alu(instr);
+   switch (alu->op) {
+   case nir_op_f2e4m3fn:
+   case nir_op_f2e4m3fn_sat:
+   case nir_op_f2e4m3fn_satfn:
+   case nir_op_f2e5m2:
+   case nir_op_f2e5m2_sat:
+   case nir_op_e4m3fn2f:
+   case nir_op_e5m22f:
+      return 2;
+   default:
+      break;
+   }
+
    const unsigned bit_size = alu->def.bit_size;
    if (bit_size == 16)
       return 2;
-- 
GitLab

